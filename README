Right now this is just a tiny Haskell implementation of a Sierpinski's Triangle.

If you provide a whole number argument, the app will generate a still frame with that many layers of recursion.

If you do not provide a number, the app will animate, iterating once per second.

Press ESC to quit.

----------------------------------------------------------------------------------------------------

Ok, I'm now working on implementing a maze generator, after which I will try and implement a maze solver.

Right now, I don't have either working.

Ok, so I want to have some way of generating the maze, where I look at each possible wall exactly once, and where all paths can be found easily in a lookup structure of some sort.

Well, I have the grid and walls generated, which took forever!!!!

But I don't have a working maze, or at least no guarantee that you can get from any one point to any other point.

I will get that working later!

NOW I GOT THAT WORKING, JUST INCREDIBLY SLOWLY.

Ok, so I can now find and handle the seperate regions of the grid, but only using an absurdly slow algorithm, and with code taht is less elegant than I would like it to be. So I'm gonna work on that, but I'll upload for now to prove to the taskmaster in my head that I have actually made progress. Also, I'm setting up a test suite, which is totally appropriate for this program, because there is a lot of purely functional stuff to test. 

Also, there are a lot of interesting mathematical things to explore with this, though I will save those for later.








-Spencer Gordon
