Right now this is just a tiny Haskell implementation of a Sierpinski's Triangle.

If you provide a whole number argument, the app will generate a still frame with that many layers of recursion.

If you do not provide a number, the app will animate, iterating once per second.

Press ESC to quit.

----------------------------------------------------------------------------------------------------

But I don't have a working maze, or at least no guarantee that you can get from any one point to any other point.

Also, there are a lot of interesting mathematical things to explore with this, though I will save those for later.

Ok, I now have the surface being partitioned correctly, and I believe in pretty good time. (Though I am sure it would be possible to make it way, way faster.)

I've replaced a lot of the list traversals with array lookups, which should have very positive effects on time. I've also gotten rid of a lot of unnecessary operations, which should help further.

So what do I want to do next: 

Well, when I am not being lazy, I might as well add some command-line options to make it more interactive and fun! So customize the size, and mabye the way that connections are switched to walls.

With the data I have now, I can go ahead and make any given layout solvable, or on the other hand, I could further partition things. I should investigate this further.

I should also figure out how to get profiling done, not that I particularly need to now.

That's it for now, I guess.

----------------------------------------------------------------------------------------------------

Well, after like three days of work, I finally got the state monad in place, and refactored all the maze junk. Yay!

Now, let's figure out what to do next.

----------------------------------------------------------------------------------------------------

Ok, so I've tried to implement Djikstra's Algorithm, and failed, but I haven't given up hope, because I'm nothing if not stubborn.

I now have a command-line option to choose a seed for the maze generator, so that I can trace through the expected behavior for a maze, and compare that to the result.
And I can repeat mazes to check stuff, etc...

But that is for tomorrow.

Also, I added random strictness in, and I don't know what effect that has had on my program. Also, I don't have a consistent way of cataloging errors.

Also, I should test it, with QuickCheck.

Use the Hitchiker's Guide tutorial on QuickCheck.




-Spencer Gordon
